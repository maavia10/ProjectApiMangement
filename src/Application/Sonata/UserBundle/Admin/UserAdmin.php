<?php

/*
 * This file is part of the Sonata Project package.
 *
 * (c) Thomas Rabaix <thomas.rabaix@sonata-project.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Admin;


use AppBundle\Controller\HelpingFunctionController;
use Application\Sonata\UserBundle\Entity\User;
use FOS\UserBundle\Model\UserManagerInterface;
use libphonenumber\PhoneNumberType;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\Filter\ChoiceType;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\CoreBundle\Form\Type\CollectionType;
use Doctrine\ORM\EntityManager;
use Vich\UploaderBundle\Form\Type\VichImageType;

class UserAdmin extends AbstractAdmin
{
    /** @var EntityManager */
    private $em;

    public function setEm (EntityManager $em) {
        $this->em = $em;
    }
    /**
     * @var UserManagerInterface
     */
    protected $userManager;

    /**
     * {@inheritdoc}
     */
    public function getFormBuilder()
    {
        $this->formOptions['data_class'] = $this->getClass();

        $options = $this->formOptions;
        $options['validation_groups'] = (!$this->getSubject() || is_null($this->getSubject()->getId())) ? 'Registration' : 'Profile';

        $formBuilder = $this->getFormContractor()->getFormBuilder($this->getUniqid(), $options);

        $this->defineFormBuilder($formBuilder);

        return $formBuilder;
    }


    /**
     * {@inheritdoc}
     */
    public function preUpdate($user)
    {
        $this->getUserManager()->updateCanonicalFields($user);
//        $this->getUserManager()->updatePassword($user);
    }

    /**
     * @return UserManagerInterface
     */
    public function getUserManager()
    {
        return $this->userManager;
    }

    /**
     * @param UserManagerInterface $userManager
     */
    public function setUserManager(UserManagerInterface $userManager)
    {
        $this->userManager = $userManager;
    }

    public function prePersist($object)
    {
        parent::prePersist($object); // TODO: Change the autogenerated stub
    }

    public function postPersist($object)
    {
        parent::postPersist($object); // TODO: Change the autogenerated stub
    }

    public function preValidate($object)
    {
//        parent::preValidate($object); // TODO: Change the autogenerated stub
        /**
         * @var  $object User
         */
        if ($object->getId() == NUll) {


            $tokenGenerator = $this->getConfigurationPool()->getContainer()->get('fos_user.util.token_generator');
            $helpingFuntionObject = new HelpingFunctionController();
            $password = substr($tokenGenerator->generateToken(), 0, 8); // 8 chars
//            $plainPassword=$helpingFuntionObject->passwordGenSend('maavia10kamran@gmail.com');
            $object->setPlainPassword($password);
            $this->sendEmailAdmin($object->getEmail(), $password);
            $pin=$this->verifyPin($object->getCompany());
            $object->setPin($pin);
            $object->setQrCodeImage($helpingFuntionObject->qrGenerate($object->getEmail()));
            echo 'wait';
        }
    }

    function sendEmailAdmin($email, $data)
    {
        echo 'test';
        $message = \Swift_Message::newInstance()
            ->setSubject('Some Subject')
            ->setFrom('maavia.thedevclan@gmail.com')
            ->setTo($email)
            ->setBody(
                $data,
                'text/html');

        $this->getConfigurationPool()->getContainer()->get('mailer')
            ->send($message);
    }

    public function verifyPin($company)
    {
        $digits = 4;
        $pin = str_pad(rand(0, pow(10, $digits) - 1), $digits, '0', STR_PAD_LEFT);
        $user = $this->checkPin($company,$pin);
        if(!empty($user)) {
            $this->verifyPin($company);
        }
            return $pin;

    }

    /**
     * {@inheritdoc}
     */
    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper
            ->addIdentifier('username')
            ->add('email')
            ->add('groups')
            ->add('enabled', null, array('editable' => true))
            ->add('createdAt');

        if ($this->isGranted('ROLE_ALLOWED_TO_SWITCH')) {
            $listMapper
                ->add('impersonating', 'string', array('template' => 'SonataUserBundle:Admin:Field/impersonating.html.twig'));
        }
    }

    /**
     * {@inheritdoc}
     */
    protected function configureDatagridFilters(DatagridMapper $filterMapper)
    {
        $filterMapper
            ->add('id')
            ->add('username')
            ->add('email')
            ->add('groups');
    }

    /**
     * {@inheritdoc}
     */
    protected function configureShowFields(ShowMapper $showMapper)
    {
        $showMapper
            ->with('General')
            ->add('username')
            ->add('email')
            ->add('pin')
            ->end()
            ->with('Groups')
            ->add('groups')
            ->end()
            ->with('Profile')
            ->add('dateOfBirth')
            ->add('cnic')
            ->add('firstname')
            ->add('lastname')
            ->add('website')
            ->add('biography')
            ->add('gender')
            ->add('locale')
            ->add('timezone')
            ->add('phone')
            ->end()
            ->with('Social')
            ->add('facebookUid')
            ->add('facebookName')
            ->add('twitterUid')
            ->add('twitterName')
            ->add('gplusUid')
            ->add('gplusName')
            ->end()
            ->with('Security')
            ->add('token')
            ->add('twoStepVerificationCode')
            ->end();
    }

    /**
     * {@inheritdoc}
     */
    protected function configureFormFields(FormMapper $formMapper)
    {
        // define group zoning
        $formMapper
            ->tab('Profile')
            ->end()
            ->tab('Company Info')
            ->end()
            ->tab('Security')
            ->with('Status', array('class' => 'col-md-4'))->end()
            ->with('Groups', array('class' => 'col-md-4'))->end()
            ->with('Roles', array('class' => 'col-md-12'))->end()
            ->end();

        $now = new \DateTime();

        // NEXT_MAJOR: Keep FQCN when bumping Symfony requirement to 2.8+.
        if (method_exists('Symfony\Component\Form\AbstractType', 'getBlockPrefix')) {
            $textType = 'Symfony\Component\Form\Extension\Core\Type\TextType';
            $datePickerType = 'Sonata\CoreBundle\Form\Type\DatePickerType';
            $urlType = 'Symfony\Component\Form\Extension\Core\Type\UrlType';
            $userGenderType = 'Sonata\UserBundle\Form\Type\UserGenderListType';
            $localeType = 'Symfony\Component\Form\Extension\Core\Type\LocaleType';
            $timezoneType = 'Symfony\Component\Form\Extension\Core\Type\TimezoneType';
            $modelType = 'Sonata\AdminBundle\Form\Type\ModelType';
            $securityRolesType = 'Sonata\UserBundle\Form\Type\SecurityRolesType';
        } else {
            $textType = 'text';
            $datePickerType = 'sonata_type_date_picker';
            $urlType = 'url';
            $userGenderType = 'sonata_user_gender';
            $localeType = 'locale';
            $timezoneType = 'timezone';
            $modelType = 'sonata_type_model';
            $securityRolesType = 'sonata_security_roles';
        }
        $options = array('required' => false);
        if (($subject = $this->getSubject()) && $subject->getImage()) {
            if ($this->getRequest()->getSchemeAndHttpHost() == "http://localhost") {
                $baseUrl = $this->getRequest()->getSchemeAndHttpHost() . "/attendance-system/web/UploadedProfileUser";   /////local system only
            } else {
                $baseUrl = $this->getRequest()->getSchemeAndHttpHost() . '/UploadedProfileUser'; /////production Only
            }
            $path = $subject->getImage();
            $path = $baseUrl . '/' . $path;
            $options['help'] = '<img style="width:20%;" src="' . $path . '" />';

        }
        $formMapper
            ->tab('Profile')
            ->add('imageFile', VichImageType::class, array(
                "label" => 'Profile Image',
              'required' => false,
                'download_link'=>false
            ), $options)
            ->add('username')
            ->add('email')
            ->add('cnic', null, array(
                "label" => 'CNIC'
            ))
            ->remove('plainPassword')
            ->add('dateOfBirth', $datePickerType, array(
                'years' => range(1900, $now->format('Y')),
                'dp_min_date' => '1-1-1900',
                'dp_max_date' => $now->format('c'),
                'required' => false,
            ))
            ->add('joiningDate', $datePickerType, array(
                'years' => range(1900, $now->format('Y')),
                'dp_min_date' => '1-1-1900',
                'dp_max_date' => $now->format('c'),
                'required' => true,
                'label' => 'Joining Data'
            ))
            ->add('firstname', null, array(
                'required' => true,
                'label' => 'Name'
            ))
            ->add('gender', $userGenderType, array(
                'required' => false,
                'translation_domain' => $this->getTranslationDomain(),
            ))
            ->add('phone',null  ,array(
                'required' => true,
            ))
            ->add('address', null, array(
                'required' => true,
                'label' => 'Address',
            ))
            ->add('bloodGroup', 'choice', array(
                'choices' => array(
                    '' => '',
                    'A+' => 'A+',
                    'A-' => 'A-',
                    'AB+' => 'AB+',
                    'AB-' => 'AB-',
                    'B+' => 'B+',
                    'B-' => 'B-',
                    'O+' => 'O',
                    'O-' => 'O-',
                ),
                'required'=>false,
                'label' => 'Blood Group'
            ))
//            ->add('password')
            ->end()
            ->end()
            ->tab('Company Info')
            ->add('company', 'sonata_type_model', array(
                'label' => 'Company',
                'class' => 'AppBundle\Entity\Company',
                'property' => 'name',
            ))
            ->add('department', 'sonata_type_model', array(
                'label' => 'Department',
                'class' => 'AppBundle\Entity\Department',
                'property' => 'name',
            ))
            ->end()
            ->end()
            ->tab('Security')
            ->with('Status')
            ->add('enabled', null, array('required' => false))
            ->end()
            ->with('Groups')
            ->add('groups', $modelType, array(
                'required' => false,
                'expanded' => true,
                'multiple' => true,
            ))
            ->end()
            ->with('Roles')
            ->add('realRoles', $securityRolesType, array(
                'label' => 'form.label_roles',
                'expanded' => true,
                'multiple' => true,
                'required' => false,
            ))
            ->end()
            ->end();
    }
    protected function checkPin($company,$pin)
    {
        $repo=$this->getConfigurationPool()->getContainer()
            ->get('doctrine')->getRepository($this->getClass());
        $data = $repo->findBy(array(
            "company"=>$company,
            "pin"=>$pin
        ), null, 50, 0);
        return $data;
    }
}
